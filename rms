#!/bin/bash

## This program can read and write 4 octets of memory
## the memory range can be accessed through /proc/PID/maps

PID="${1}"
mem_start="0x$(awk -F '-' '{print $1}' <<< ${2})"
mem_end="0x$(awk -F '-' '{print $2}' <<< ${2})"
mem_offset="$((${mem_end} - ${mem_start}))"

RED="\033[1;31m"
GRE="\033[1;32m"
YEL="\033[1;33m"
BLU="\033[1;34m"
NCL="\033[00m"

function mem_dump() {
  xxd -e -c 4 -s "${mem_start}" -l "${mem_offset}" /proc/${PID}/mem
}

function value_from_address() {
  read -p "Address: " address
  value=$(xxd -e -c 4 -s "$((0x${address/0x/}))" -l 4 /proc/${PID}/mem | awk '{print $2}')
  echo -e "\n${BLU}$((16#${value}))${NCL}\n"
}

function get_by_value() {
  read -p "Value in decimal: " decimal_value

  ## generate a memory dump with memory addresses which the value matches the
  ## decimal especified by user
  memory=$(mem_dump | awk -v value="$(printf %08x ${decimal_value})" '{if ($2 == value) print}')
  
  awk -v YEL=${YEL} \
      -v GRE=${GRE} \
      -v NCL=${NCL} \
      '{printf "%s%s %s%s%s\n", YEL, $1, GRE, $2, NCL}' <<< ${memory}

  while :; do
    echo -e "\nGet By Value Menu:\n${BLU}[1]${NCL} Next Value\n${BLU}[0]${NCL} Exit"
    read -p "> " option
    case "${option}" in
      1)
        read -p "Next value in decimal: " next_value
        tmp_memory="${memory}"

        ## ref to lines 30-31
        memory=$(mem_dump | awk -v value="$(printf %08x ${next_value})" '{if ($2 == value) print}')
        
        ## compare the two memory dumps first columns and suppress values uniques
        ## for both files, in another words print only memory addresses
        ## present in both files at the same time
        comm_to_both=$(comm -12 <(awk '{print $1}' <<< "${tmp_memory}") <(awk '{print $1}' <<< "${memory}"))
        
        awk -v right_value="${comm_to_both}" \
            -v YEL=${YEL} \
            -v GRE=${GRE} \
            -v NCL=${NCL} \
            '{if ($1==right_value) printf "%s%s %s%s%s\n", YEL, $1, GRE, $2, NCL}' \
            <<< ${memory}

        continue
        ;;
      0)
        return
        ;;
      *)
        echo -e "${RED}Error${NCL}: invalid option"
        ;;
    esac
  done
}

function write_to_address() {
  read -p "Address to write to: " address_to_write
  read -p "New value in decimal: " value_to_write
  echo -ne "$(printf %08x ${value_to_write} | tac -rs '..' | sed 's/../\\x&/g')" | \
  dd of=/proc/${PID}/mem bs=1 seek="$((0x${address_to_write/0x/}))" conv=notrunc &> /dev/null \
  && echo -e "Value '${GRE}${value_to_write}${NCL}' successfully written to '${YEL}${address_to_write}${NCL}' address"
}

case "${1}" in
  -h|--help)
    echo -e "Usage: rms [-h]<pid> <memory-range>"
    echo -e "E.g: rms 7421 7ffdf4a7d000-7ffdf4a9f000"
    exit 0
    ;;
esac

while :; do
  echo -e "${GRE}[1]${NCL} Print From Address"
  echo -e "${GRE}[2]${NCL} Get By Value"
  echo -e "${GRE}[3]${NCL} Write to Address\n${GRE}[0]${NCL} Exit"
  read -p "> " option

  case "${option}" in
    1)
      value_from_address
      ;;
    2)
      get_by_value
      ;;
    3)
      write_to_address
      ;;
    0)
      exit 0
      ;;
    *)
      echo -e "${RED}Error${NCL}: invalid option"
  esac
done
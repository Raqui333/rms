#!/bin/bash

## This program can read and write to memory
## the memory range can be accessed through /proc/PID/maps

PID="${1}"
mem_start="0x$(cut -d '-' -f 1 <<< ${2})"
mem_end="0x$(cut -d '-' -f 2 <<< ${2})"
mem_offset="$((${mem_end} - ${mem_start}))"

function mem_dump() {
  xxd -e -c 4 -s "${mem_start}" -l "${mem_offset}" /proc/${PID}/mem
}

function value_from_address() {
  read -p "Address: " address
  value=$(xxd -e -c 4 -s "$((0x${address/0x/}))" -l 4 /proc/${PID}/mem | awk '{print $2}')
  echo -e "\n\033[1;32m$((16#${value}))\033[00m"
}

function get_by_value() {
  read -p "Value in decimal: " decimal_value
  memory=$(mem_dump | awk -v value="$(printf %.8x ${decimal_value})" '{if ($2 == value) print}')
  echo -e "${memory}" | awk '{printf "\033[1;33m%s \033[1;32m%s\033[00m\n", $1, $2}'
  while :; do
    echo -e "\nGet By Value Menu:\n\033[1;34m[1]\033[00m Next Value\n\033[1;34m[0]\033[00m Exit"
    read -p "> " option
    case "${option}" in
      1)
        read -p "Next value in decimal: " next_value
        tmp_memory="${memory}"
        memory=$(mem_dump | awk -v value="$(printf %.8x ${next_value})" '{if ($2 == value) print}')
        comm_to_both=$(comm -12 <(awk '{print $1}' <<< "${tmp_memory}") <(awk '{print $1}' <<< "${memory}"))
        echo -e "${memory}" | awk -v right_value="${comm_to_both}" '{if ($1==right_value) printf "\033[1;33m%s \033[1;32m%s\033[00m\n", $1, $2}'
        continue
        ;;
      0)
        return
        ;;
      *)
        echo -e "\033[1;31mError\033[00m: invalid option"
        ;;
    esac
  done
}

function write_to_address() {
  read -p "Address to write to: " address_to_write
  read -p "New value in decimal: " value_to_write
  echo -e -n "$(printf %.8x ${value_to_write} | tac -rs '..' | sed 's/../\\x&/g')" | \
  dd of=/proc/${PID}/mem bs=1 seek="$((0x${address_to_write/0x/}))" conv=notrunc &> /dev/null \
  && echo -e "Value '\033[1;32m${value_to_write}\033[00m' successfully written to '\033[1;33m${address_to_write}\033[00m' address"
}

case "${1}" in
  -h|--help)
    echo -e "Usage: rms [-h]<pid> <memory-range>"
    echo -e "E.g: rms 7421 7ffdf4a7d000-7ffdf4a9f000"
    exit 0
    ;;
esac

while :; do
  echo -e "\nMenu:\n\033[1;32m[1]\033[00m Print From Address"
  echo -e "\033[1;32m[2]\033[00m Get By Value"
  echo -e "\033[1;32m[3]\033[00m Write to Adress\n\033[1;32m[0]\033[00m Exit"
  read -p "> " option

  case "${option}" in
    1)
      value_from_address
      ;;
    2)
      get_by_value
      ;;
    3)
      write_to_address
      ;;
    0)
      exit 0
      ;;
    *)
      echo -e "\033[1;31mError\033[00m: invalid option"
  esac
done